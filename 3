git remote add origin https://github.com/GITMAXIMUM/3.git
git branch -M main
git push -u origin main

def append(self, new_element):
    """Append the new element at the end of the list.
    if there is no element yet in the list, it is the head element."""
    if self.head is None:
        self.head = new_element
        return

    current_element = self.head
    while current_element.next:
        current_element = current_element.next
    current_element.next = new_element

def get_position(self, position):
    """Get an element from a particular position.
    Assume the first position is the index "1".
    Return "None" if position is not in the list."""
    if position < 1:
        return None

    current_element = self.head
    for i in range(1, position):
        if current_element is None:
            return None
        current_element = current_element.next
    return current_element

def insert(self, new_element, position):
    """Insert a new node at the given position.
    Assume the first position is "1".
    Inserting at position 3 means between the 2nd and 3rd elements."""
    if position == 1:
        new_element.next = self.head
        self.head = new_element
        return

    prev_element = self.get_position(position-1)
    if prev_element is None:
        return
    new_element.next = prev_element.next
    prev_element.next = new_element

def delete(self, data):
    """Delete the first node with a given value."""
    if self.head is None:
        return

    if self.head.data == data:
        self.head = self.head.next
        return

    current_element = self.head
    while current_element.next:
        if current_element.next.data == data:
            current_element.next = current_element.next.next
            return
        current_element = current_element.next
Test cases
Set up some Elements
e1 = Element(1)
e2 = Element(2)
e3 = Element(3)
e4 = Element(4)

Start setting up a LinkedList
llist = LinkedList()
llist.append(e1)
llist.append(e2)
llist.append(e3)

Test if appends were correct
Should be 3
print(llist.head.next.next.data)

Test get_position
Should also be 3
print(llist.get_position(3).data)

Test insert
llist.insert(e4,3)

Should print 4 now
print(llist.get_position(3).data)

Test delete
llist.delete(1)

Should print 2 now
print(llist.get_position(1).data)

Should print 4 now
print(llist.get_position(2).data)

Should print 3 now
print(llist.get_position(3).data)
